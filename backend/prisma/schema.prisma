// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  color     String   @default("#667eea")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Partner relationship
  partnerId String?
  partner   User?    @relation("PartnerRelation", fields: [partnerId], references: [id])
  partnerOf User[]   @relation("PartnerRelation")

  // User preferences
  preferences UserPreferences?

  // Related data
  tasks       Task[]
  notes       Note[]
  checkIns    CheckIn[]
  streaks     Streak[]
  achievements UserAchievement[]
  bucketListItems BucketListItem[]
  scheduleItems ScheduleItem[]
  financeEntries FinanceEntry[]
  notifications Notification[]

  @@map("users")
}

model UserPreferences {
  id       String @id @default(cuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  theme    String @default("light")
  language String @default("en")
  timezone String @default("UTC")
  notifications Boolean @default(true)
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTo  String?
  subtasks    Subtask[]
  attachments TaskAttachment[]
  history     TaskHistory[]

  @@map("tasks")
}

model Subtask {
  id          String   @id @default(cuid())
  title       String
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assignedTo  String?

  @@map("subtasks")
}

model TaskAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())

  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model TaskHistory {
  id        String   @id @default(cuid())
  action    String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())

  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_history")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  isPinned  Boolean  @default(false)
  isShared  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  String?
  tags      String[]
  attachments NoteAttachment[]
  history   NoteHistory[]

  @@map("notes")
}

model NoteAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())

  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("note_attachments")
}

model NoteHistory {
  id        String   @id @default(cuid())
  action    String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())

  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("note_history")
}

model CheckIn {
  id            String   @id @default(cuid())
  mood          String
  emoji         String
  note          String
  energy        Int
  gratitude     String?
  goals         String[]
  partnerMessage String?
  isShared      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("check_ins")
}

model Streak {
  id            String   @id @default(cuid())
  type          String
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  goal          Int      @default(30)
  lastActivity  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("streaks")
}

model Achievement {
  id          String @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  rarity      String @default("common")
  category    String
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  unlockedAt    DateTime @default(now())
  isUnlocked    Boolean  @default(true)

  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model BucketListItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String
  priority    Priority @default(MEDIUM)
  status      BucketStatus @default(PLANNED)
  cost        Float?
  timeEstimate String?
  difficulty  String @default("medium")
  progress    Int    @default(0)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTo  String?
  subtasks    BucketSubtask[]
  attachments BucketAttachment[]

  @@map("bucket_list_items")
}

model BucketSubtask {
  id          String   @id @default(cuid())
  title       String
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bucketItemId String
  bucketItem   BucketListItem @relation(fields: [bucketItemId], references: [id], onDelete: Cascade)
  assignedTo   String?

  @@map("bucket_subtasks")
}

model BucketAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())

  bucketItemId String
  bucketItem   BucketListItem @relation(fields: [bucketItemId], references: [id], onDelete: Cascade)

  @@map("bucket_attachments")
}

model ScheduleItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  isAllDay    Boolean  @default(false)
  location    String?
  isRecurring Boolean  @default(false)
  recurrence  String?
  reminder    Int? // minutes before
  mood        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTo  String?

  @@map("schedule_items")
}

model FinanceEntry {
  id          String   @id @default(cuid())
  title       String
  description String?
  amount      Float
  currency    String   @default("USD")
  category    String
  type        FinanceType
  date        DateTime
  isRecurring Boolean  @default(false)
  recurrence  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTo  String?

  @@map("finance_entries")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  readAt    DateTime?

  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BucketStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FinanceType {
  INCOME
  EXPENSE
  SAVINGS
  INVESTMENT
}
